Ask Ori to fix “Neura flow diagram” in Basic doc
In Basic docs - state that Alpha can only be used internally with colleagues
Click through all links
In Android doc check all links to make sure they’re right

Basic doc- put this in: 

state - what you’re doing now

event - change in state

data object - data set that describes user activity over time

Basic doc - get diagram to agree with nomenclature

If you sign up for a Neura account with Gmail or FB you won’t have a password and will need one to be generated separately


Neura for IOS page:
“Get the Neura SDK for iOS” Button doesn’t work on the page - Michael and Trinu know we need to fix this link

  - **the word doc lists `numOfTimesInDay` but that doesn't show up in Postman. Do we still include it? how does it work exactly?**



To deal with in the future

Sleep service
**how are we defining "deep sleep"? benchmark w/ fitbit, jawbone**
**what does it mean when this is 0 as in the example below?** 
**what does sleep efficiency mean to Neura? how are we measuring/defining it?**

HRV Service
**why is this `items` and all other data objects use `data`?**
Check: - `items` > `timestamp`: The timestamp when data were queried. 

 **In the Word doc it looks like there's a different response for `work` vs. `workout`. Is that true? If so, update text below**

SUBSCRIPTIONS
##5. Neura notification for event subscription
- `notificationTimestamp`:  The time when Neura sent the response in epoch time. **Mike changed from Unix GTM time**
- `state`: State that customer has set previously in the subscription. **clarify with Berman**
    - `identifier`: Customer’s subscription id that was set in the event subscription **do we really use two different names for the same thing? why?**
- `event`: The complex object of event data
       -  `timestamp`: Timestamp of the event in Unix time (GTM time) **can we change this to be parallel to PULL requests? Let's be consistent wherever possible**
       -  `userId`: Unique user id that had event occurred **clarify with Berman**
       -  `eventName`: The name of the event you subscribed to.
       -  `[metadata]`: Metadata is unique to each event, as detailed in event descriptions.
 

`POST https://wapi.theneura.com/v1/subscriptions`
**Is this true? when I tested it was GET not POST**

---------

## GET /users/profile/hrv 

`hrv` is a data object containing a user’s heart rate information either on a single `date` or during a period of time beginning on `start_date` and ending on `end_date`, inclusive. This service is only available for users that have integrated Neurosky with Neura and requires a **Bearer** authorization token.


### Resource URI

**`https://wapi.theneura.com/v1/users/profile/hrv`**

### Request query parameters

#### Required request parameters
Use the single `date` for a data on a single day or the `start_date` and `end_date` parameters for a period.  If you include all 3 parameters Neura will return an `error`. **have neura return `error`. currently we return `success` and an empty data object**
- `date`: The day for which you want information in YYYY-MM-DD format.  
OR
- `start_date`: The first day for which you want information in YYYY-MM-DD format.
- `end_date`: The last day for which you want information in YYYY-MM-DD format.

#### Optional request parameters
None.

### Request headers

#### Required request headers

- `authorization`: Bearer <access_token>

#### Optional request headers

- `Cache-Control`: Specifies if the server should circumvent the server cache

## Response for `hrv` 

  - `status`: The status is `success`.
  - `timestamp`: The time when Neura sent the response in epoch time. 
  - `items`:  The complex object of heart rate data. If data are not available for any of the sub-objects then Neura returns 0.
  - `items` > `value`: Heart rate. 
  - `items` > `timestamp`: The timestamp when data were queried. 

### Example `hrv` request

```http
GET https://wapi.theneura.com/v1/users/profile/call
Authorization: Bearer asdf1234**************************
Cache-Control: no-cache
```

### Example `hrv` response

#### Headers
```http
status: 200 OK
version: HTTP/1.1
Content-Type: application/json
```
#### Body
```json
{
**mikimer to get example from berman -- i couldn't get this from Postman**
   }
```
 




-----






